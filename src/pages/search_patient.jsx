import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { jwtDecode } from 'jwt-decode';
import { INSURANCE_TYPE_BY_ID } from '../constants/insurance_type';
const API_URL = process.env.REACT_APP_API_URL;

export default function SearchPatient() {
  const [hn, setHn] = useState('');
  const [name, setName] = useState('');
  const [telephone, setTelephone] = useState('');
  const [idNumber, setIdNumber] = useState('');
  const [results, setResults] = useState([]);
  const [noResult, setNoResult] = useState(false);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const token = localStorage.getItem('token');
  const [userRole, setUserRole] = useState('');


  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      try {
        const decoded = jwtDecode(token);
        setUserRole(decoded.role || '');
      } catch (err) {
        console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ token ‡πÑ‡∏î‡πâ:', err);
      }
    }
  }, []);

  useEffect(() => {
    const delayDebounce = setTimeout(() => {
      if (hn || name || telephone || idNumber) {
        searchPatients();
      } else {
        setResults([]);
        setNoResult(false);
      }
    }, 300);
    return () => clearTimeout(delayDebounce);
  }, [hn, name, telephone, idNumber]);

  const searchPatients = async () => {
    setLoading(true);
    try {
      const queryParams = new URLSearchParams();
      if (hn) queryParams.append('hn', hn);
      if (name) queryParams.append('name', name);
      if (telephone) queryParams.append('telephone', telephone);
      if (idNumber) queryParams.append('id_number', idNumber);

      const response = await fetch(`${API_URL}/patients/search-by-field?${queryParams.toString()}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      const data = await response.json();
      if (Array.isArray(data)) {
        setResults(data);
        setNoResult(data.length === 0);
      } else {
        setResults([]);
        setNoResult(true);
      }
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:', error);
      setResults([]);
      setNoResult(true);
    } finally {
      setLoading(false);
    }
  };

  const handleDetailClick = (id) => {
    navigate(`/patient_detail/${id}`);
  };

  const handleAddToQueue = async (patientId) => {
    const confirmAdd = window.confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° HN: ${patientId} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`);
    if (!confirmAdd) return;

    try {
      const response = await fetch(`${API_URL}/clinic-queue`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          patient_id: patientId,
          time_coming: new Date(),
          room: '0',
          detail_to_room: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÇ‡∏î‡∏¢ staff", // ‡∏´‡∏£‡∏∑‡∏≠ "self-register" ‡∏Å‡πá‡πÑ‡∏î‡πâ
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + errorData.error);
        return;
      }

      alert('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß:', error);
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ');
    }
  };

  return (
    <div style={{ padding: '1rem' }}>
      <h2>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤</h2>

      {userRole === 'staff' || userRole === 'admin' ? (
        <button
          onClick={() => navigate('/dashboard/staff')}
          style={{
            backgroundColor: '#f0f0f0',
            padding: '0.5rem 1rem',
            marginBottom: '1rem',
            borderRadius: '6px',
            border: '1px solid #ccc',
            cursor: 'pointer',
          }}
        >
          üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å Staff
        </button>
      ) : null}

      {userRole === 'doctor' && (
        <button
          onClick={() => navigate('/dashboard/doctor')}
          style={{
            backgroundColor: '#f0f0f0',
            padding: '0.5rem 1rem',
            marginBottom: '1rem',
            borderRadius: '6px',
            border: '1px solid #ccc',
            cursor: 'pointer',
          }}
        >
          üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å Doctor
        </button>
      )}

      <input type="text" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ HN" value={hn} onChange={(e) => setHn(e.target.value)} style={{ padding: '0.5rem', width: '100%', marginBottom: '0.5rem' }} />
      <input type="text" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" value={name} onChange={(e) => setName(e.target.value)} style={{ padding: '0.5rem', width: '100%', marginBottom: '0.5rem' }} />
      <input type="text" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" value={telephone} onChange={(e) => setTelephone(e.target.value)} style={{ padding: '0.5rem', width: '100%', marginBottom: '0.5rem' }} />
      <input type="text" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô" value={idNumber} onChange={(e) => setIdNumber(e.target.value)} style={{ padding: '0.5rem', width: '100%', marginBottom: '1rem' }} />

      {loading && <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...</p>}
      {!loading && noResult && <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</p>}

      {!loading && results.length > 0 && (
        <ul style={{ listStyle: 'none', padding: 0 }}>
          {results.map((patient) => (
            <li key={patient.id} style={{ border: '1px solid #ccc', padding: '1rem', marginBottom: '0.5rem', borderRadius: '8px' }}>
              <strong>{patient.first_name} {patient.last_name}</strong><br />
              <label><strong>HN:</strong> {patient.id}</label><br />
              <label><strong>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:</strong> {patient.id_number}</label><br />
              <label><strong>‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î:</strong> {new Date(patient.birth_day).toLocaleDateString('th-TH')}</label><br />
              <label><strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</strong> {patient.telephone}</label><br />
              <label><strong>Line User ID:</strong> {patient.line_user_id ? '‚úÖ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' : '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}</label><br />
              <label><strong>‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤:</strong>{' '}
              {patient.insurance_type
                ? INSURANCE_TYPE_BY_ID[patient.insurance_type]
                : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤'}</label><br />
              <label><strong>‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</strong> {patient.insurance_balance}</label><br />
              <div style={{ marginTop: '0.5rem' }}>
                <button onClick={() => handleDetailClick(patient.id)}>‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button>
                {(userRole === 'staff' || userRole === 'admin') && (
                  <button
                    style={{ marginLeft: '0.5rem', backgroundColor: '#d0f5d0' }}
                    onClick={() => handleAddToQueue(patient.id)}
                  >
                    ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß
                  </button>
                )}
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
