// üìÅ c:\Toothcraft\frontend\src\components\upload_image_modal.jsx

import React, { useState } from 'react';
import { DateTime } from 'luxon'; // üëà Import Luxon

const API_URL = process.env.REACT_APP_API_URL;

export default function UploadImageModal({ patientId, onClose, onUploadSuccess }) {
  const [file, setFile] = useState(null);
  const [isBackdate, setIsBackdate] = useState(false); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Checkbox ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
  const [takenTime, setTakenTime] = useState(() => { // üëà ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const yesterday = DateTime.now().setZone('Asia/Bangkok').minus({ days: 1 }).toFormat('yyyy-MM-dd');
    return yesterday;
  });
  const [isUploading, setIsUploading] = useState(false);
  const [error, setError] = useState('');
  const [errorDate, setErrorDate] = useState('');
  const [errorFile, setErrorFile] = useState('');
  const token = localStorage.getItem('token');

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
      const allowedTypes = ['image/jpeg', 'image/heic', 'image/heif'];
      if (!allowedTypes.includes(selectedFile.type)) {
        setErrorFile('‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå JPEG ‡∏´‡∏£‡∏∑‡∏≠ HEIC');
        setFile(null); // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ file ‡πÄ‡∏õ‡πá‡∏ô null ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡∏π‡∏Å disable
      } else {
        setFile(selectedFile);
        setErrorFile(''); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      }
    }
  };

  const handleUpload = async () => {
    if (!file) {
      setErrorFile('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î');
      return;
    }

    setIsUploading(true);
    setError('');

    const formData = new FormData();
    formData.append('file', file);
    formData.append('patient_id', patientId);

    // ‚úÖ ‡∏™‡πà‡∏á taken_time ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ isBackdate ‡πÄ‡∏õ‡πá‡∏ô true
    if (isBackdate) {
      formData.append('taken_time', DateTime.fromFormat(takenTime, 'yyyy-MM-dd').toISO());
    }

    try {
      const res = await fetch(`${API_URL}/gcs/upload`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (!res.ok) {
        const errData = await res.json();
        throw new Error(errData.message || '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }

      alert('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      onUploadSuccess(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
      onClose(); // ‡∏õ‡∏¥‡∏î Modal
    } catch (err) {
      setError(err.message);
    } finally {
      setIsUploading(false);
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  const isDateValid = (dateString) => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á DateTime Object ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏∏ Timezone
    const selectedDate = DateTime.fromFormat(dateString, 'yyyy-MM-dd', { zone: 'Asia/Bangkok' });
    const today = DateTime.now().setZone('Asia/Bangkok').startOf('day');

    if (!selectedDate.isValid) {
      return false; // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    }

    if (selectedDate >= today) {
      return false; // ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    }

    return true; // ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏≠‡∏î‡∏µ‡∏ï)
  };

  return (
    <div style={styles.modalBackdrop}>
      <div style={styles.modalContent}>
        <h3>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û X-Ray</h3>
        <div style={styles.formGroup}>
          <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û:</label>
          {/* ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö accept ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô */}
          <input type="file" accept=".jpg,.jpeg,.heic" onChange={handleFileChange} />
        </div>

        <div style={styles.formGroup}>
          <label>
            <input
              type="checkbox"
              checked={isBackdate}
              onChange={(e) => {
                setIsBackdate(e.target.checked);
                if (errorDate) {
                  setTakenTime(() => { // üëà ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                    const yesterday = DateTime.now().setZone('Asia/Bangkok').minus({ days: 1 }).toFormat('yyyy-MM-dd');
                    return yesterday;
                  });
                  setErrorDate(''); // ‡∏•‡πâ‡∏≤‡∏á error ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Checkbox ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                }
              }}
            />
            ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
          </label>
        </div>

        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ isBackdate ‡πÄ‡∏õ‡πá‡∏ô true */}
        {isBackdate && (
          <div style={styles.formGroup}>
            <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û:</label>
            <input
              type="date"
              value={takenTime}
              onChange={(e) => {
                const newDate = e.target.value;
                if (isDateValid(newDate)) {
                  setTakenTime(newDate);
                  setErrorDate('');
                } else {
                  setTakenTime(newDate);
                  setErrorDate('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏≠‡∏î‡∏µ‡∏ï‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)');
                }
              }}
              style={{ padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}
            />
          </div>
        )}

        {error && <p style={{ color: 'red' }}>{error}</p>}
        {errorDate && <p style={{ color: 'red' }}>{errorDate}</p>}
        {errorFile && <p style={{ color: 'red' }}>{errorFile}</p>}
        <div style={styles.buttonGroup}>
          <button onClick={onClose} disabled={isUploading}>
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
          <button
            onClick={handleUpload}
            disabled={isUploading || !!errorDate || !!errorFile || !file} // ‡∏õ‡∏£‡∏±‡∏ö disabled ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ error
          >
            {isUploading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î'}
          </button>
        </div>
      </div>
    </div>
  );
}

const styles = {
  modalBackdrop: {
    position: 'fixed',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  modalContent: {
    backgroundColor: 'white',
    padding: '2rem',
    borderRadius: '8px',
    width: '90%',
    maxWidth: '500px',
  },
  formGroup: {
    marginBottom: '1rem',
  },
  buttonGroup: {
    display: 'flex',
    justifyContent: 'flex-end',
    gap: '1rem',
    marginTop: '1.5rem',
  },
};