import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import ReferModal from '../components/refer_modal';

export default function DoctorRoomPage() {
  const [waitingPatients, setWaitingPatients] = useState([]);
  const [roomPatients, setRoomPatients] = useState([]);
  const [errorMsg, setErrorMsg] = useState('');
  const [selectedPatient, setSelectedPatient] = useState(null);
  const [visitHistory, setVisitHistory] = useState([]);
  const [isReferModalOpen, setIsReferModalOpen] = useState(false);
  const [referQueueId, setReferQueueId] = useState(null);
  const navigate = useNavigate();

  const selectedRoom = sessionStorage.getItem('selectedRoom') || '';

  useEffect(() => {
    if (!selectedRoom) {
      navigate('/dashboard/doctor');
      return;
    }
    const fetchAllData = () => {
      fetchWaitingPatients();
      fetchRoomPatients();
    };
    fetchAllData();
    const interval = setInterval(fetchAllData, 10000);
    return () => clearInterval(interval);
  }, [selectedRoom, navigate]);

  const fetchVisitHistory = async (patientId) => {
    try {
      const token = localStorage.getItem('token');
      const res = await fetch(`http://localhost:3000/visits/history/${patientId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      const data = await res.json();
      if (!Array.isArray(data)) throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      setVisitHistory(data);
    } catch (err) {
      console.error(err);
      setErrorMsg('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÑ‡∏î‡πâ');
      setVisitHistory([]);
    }
  };

  const fetchWaitingPatients = async () => {
    setWaitingPatients([]);
    try {
      const token = localStorage.getItem('token');
      const res = await fetch(`http://localhost:3000/clinic-queue?room=0`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      const data = await res.json();
      if (!Array.isArray(data)) throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      setWaitingPatients(data);
    } catch (err) {
      console.error(err);
      setErrorMsg('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏£‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
    }
  };

  const fetchRoomPatients = async () => {
    setRoomPatients([]);
    try {
      const token = localStorage.getItem('token');
      const res = await fetch(`http://localhost:3000/clinic-queue?room=${selectedRoom}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      const data = await res.json();
      if (!Array.isArray(data)) throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      const sorted = data.sort((a, b) => new Date(a.time_coming) - new Date(b.time_coming));
      setRoomPatients(sorted);
    } catch (err) {
      console.error(err);
      setErrorMsg('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
    }
  };

  const sendToRoom = async (queueId) => {
    try {
      const token = localStorage.getItem('token');
      await fetch(`http://localhost:3000/clinic-queue/${queueId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },
        body: JSON.stringify({ room: selectedRoom }),
      });
      fetchWaitingPatients();
      fetchRoomPatients();
    } catch (err) {
      console.error('‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ', err);
    }
  };

  const handleReferConfirm = async (targetRoom, note) => {
    try {
      const token = localStorage.getItem('token');

      const trimmedNote = note?.trim();
      let formattedNote = '';

      if (trimmedNote) {
        const timestamp = new Date().toLocaleTimeString('th-TH', {
          hour: '2-digit',
          minute: '2-digit',
          hour12: false,
          timeZone: 'Asia/Bangkok', // ‚úÖ ‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á timezone
        });

        formattedNote = `-- Doctor -- (${timestamp})\n${trimmedNote}`;
      }

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á detail_to_room ‡∏Å‡πà‡∏≠‡∏ô
      const selected = roomPatients.find((p) => p.id === referQueueId);
      const previousNote = selected?.detail_to_room || '';
      const combinedNote = previousNote
        ? `${previousNote.trim()}\n\n${formattedNote}`  // ‡∏ï‡πà‡∏≠‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
        : formattedNote;

      await fetch(`http://localhost:3000/clinic-queue/${referQueueId}/refer`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },
        body: JSON.stringify({ room: targetRoom, note: combinedNote.trim()  }),
      });
      setIsReferModalOpen(false);
      setReferQueueId(null);
      fetchRoomPatients();
    } catch (err) {
      console.error('‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', err);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠');
    }
  };

  const formatAge = (birthDateStr) => {
    if (!birthDateStr) return '-';
    const birthDate = new Date(birthDateStr);
    const now = new Date();
    let years = now.getFullYear() - birthDate.getFullYear();
    let months = now.getMonth() - birthDate.getMonth();
    if (months < 0) {
      years -= 1;
      months += 12;
    }
    return `${years} ‡∏õ‡∏µ ${months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`;
  };

  const formatTime = (dateStr) => {
    if (!dateStr) return '-';
    return new Date(dateStr).toLocaleTimeString('th-TH', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false,
    });
  };

  const formatDate = (dateStr) => {
    if (!dateStr) return '-';
    return new Date(dateStr).toLocaleDateString('th-TH');
  };

  const formatProcedures = (visit) => {
    if (!visit.visit_procedures || visit.visit_procedures.length === 0) return '-';
    return visit.visit_procedures.map((vp, idx) => {
      const procName = vp.procedures?.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£';
      const tooth = vp.tooth ? `#${vp.tooth}` : '';
      const price = vp.price ? `(${vp.price})` : '';
      const paidStatus = vp.paid ? '‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞';
      return (
        <React.Fragment key={idx}>
          {`${procName} ${tooth} ${price} - ${paidStatus}`}
          {idx !== visit.visit_procedures.length - 1 && <br />}
        </React.Fragment>
      );
    });
  };

  const handleViewHistory = (patientObj) => {
    setSelectedPatient(patientObj);
    fetchVisitHistory(patientObj.patient_id);
  };

  const handleCloseModal = () => {
    setSelectedPatient(null);
    setVisitHistory([]);
  };

  return (
    <div>
      <h1>‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à {selectedRoom}</h1>

      <div style={{ marginBottom: '1rem', display: 'flex', gap: '1rem' }}>
        <div
          style={{ padding: '0.5rem 1rem', backgroundColor: '#eee', cursor: 'pointer' }}
          onClick={() => navigate('/dashboard/doctor')}
        >
          üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î
        </div>
        <div
          style={{ padding: '0.5rem 1rem', backgroundColor: '#eee', cursor: 'pointer' }}
          onClick={() => navigate('/logout')}
        >
          üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        </div>
      </div>

      {errorMsg && <div style={{ color: 'red', margin: '1rem 0' }}>‚ö†Ô∏è {errorMsg}</div>}

      <div style={{ display: 'flex', gap: '2rem' }}>
        {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢: ‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á */}
        <div style={{ flex: 1 }}>
          <h3>‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à {selectedRoom}</h3>
          <table border="1" width="100%">
            <thead>
              <tr>
                <th>HN</th>
                <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                <th>‡∏≠‡∏≤‡∏¢‡∏∏</th>
                <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏ñ‡∏∂‡∏á</th>
                <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠</th>
                <th>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</th>
                <th>‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠</th>
              </tr>
            </thead>
            <tbody>
              {roomPatients.map((p) => (
                <tr key={p.id}>
                  <td>{p.patient_id}</td>
                  <td>{p.patients?.first_name} {p.patients?.last_name}</td>
                  <td>{formatAge(p.patients?.birth_day)}</td>
                  <td>{formatTime(p.time_coming)}</td>
                  <td style={{ whiteSpace: 'pre-wrap' }}>{p.detail_to_room || '-'}</td>
                  <td>
                    <button onClick={() => navigate(`/dashboard/doctor/visit/${p.id}/${p.patient_id}`)}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</button>
                  </td>
                  <td>
                    <button onClick={() => {
                      setReferQueueId(p.id);
                      setIsReferModalOpen(true);
                    }}>‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤: ‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á */}
        <div style={{ flex: 1 }}>
          <h3>‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á</h3>
          <table border="1" width="100%">
            <thead>
              <tr>
                <th>HN</th>
                <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                <th>‡∏≠‡∏≤‡∏¢‡∏∏</th>
                <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏ñ‡∏∂‡∏á</th>
                <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠</th>
                <th>‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥</th>
              </tr>
            </thead>
            <tbody>
              {waitingPatients.map((p) => (
                <tr key={p.id}>
                  <td>{p.patient_id}</td>
                  <td>{p.patients?.first_name} {p.patients?.last_name}</td>
                  <td>{formatAge(p.patients?.birth_day)}</td>
                  <td>{formatTime(p.time_coming)}</td>
                  <td style={{ whiteSpace: 'pre-wrap' }}>{p.detail_to_room || '-'}</td>
                  <td>
                    <button onClick={() => handleViewHistory(p)}>‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* MODAL ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ */}
      {selectedPatient && (
        <div style={{
          position: 'fixed', top: 0, left: 0, width: '100%', height: '100%',
          background: '#000000aa', display: 'flex', justifyContent: 'center', alignItems: 'center',
          overflowY: 'auto', padding: '1rem',
        }}>
          <div style={{
            background: '#fff', padding: '2rem', borderRadius: '10px', width: '90%',
            maxWidth: '600px', maxHeight: '90vh', overflowY: 'auto',
          }}>
            <h2>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</h2>
            <p><b>HN:</b> {selectedPatient.patient_id}</p>
            <p><b>‡∏ä‡∏∑‡πà‡∏≠:</b> {selectedPatient.patients?.first_name} {selectedPatient.patients?.last_name}</p>
            <p><b>‡∏≠‡∏≤‡∏¢‡∏∏:</b> {formatAge(selectedPatient.patients?.birth_day)}</p>
            <p><b>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</b> {selectedPatient.patients?.telephone || '-'}</p>

            <h3 style={{ marginTop: '1rem' }}>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏Å‡πà‡∏≤</h3>
            {visitHistory.length === 0 ? (
              <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤</p>
            ) : (
              <table border="1" width="100%" style={{ borderCollapse: 'collapse' }}>
                <thead>
                  <tr>
                    <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                    <th>‡∏´‡∏°‡∏≠</th>
                    <th>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</th>
                    <th>‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£</th>
                    <th>‡∏ô‡∏±‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤</th>
                  </tr>
                </thead>
                <tbody>
                  {visitHistory.map((v) => (
                    <tr key={v.id}>
                      <td>{formatDate(v.visit_time)}</td>
                      <td>{v.doctors?.first_name} {v.doctors?.last_name}</td>
                      <td style={{ whiteSpace: 'pre-wrap' }}>{v.treatment_note || '-'}</td>
                      <td style={{ whiteSpace: 'pre-wrap' }}>{formatProcedures(v)}</td>
                      <td style={{ whiteSpace: 'pre-wrap' }}>{v.next_visit || '-'}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}

            <div style={{ marginTop: '1rem', textAlign: 'right' }}>
              <button onClick={handleCloseModal}>‡∏õ‡∏¥‡∏î</button>
            </div>
          </div>
        </div>
      )}

      {/* MODAL ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ */}
      <ReferModal
        isOpen={isReferModalOpen}
        onClose={() => setIsReferModalOpen(false)}
        queueId={referQueueId}
        onConfirm={handleReferConfirm}
      />
    </div>
  );
}
