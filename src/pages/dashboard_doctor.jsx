import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { jwtDecode } from 'jwt-decode';
import EnterRoomModal from '../components/enter_room_modal';
const API_URL = process.env.REACT_APP_API_URL;

export default function DashboardDoctor() {
  const [doctorId, setDoctorId] = useState(null);
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentRoom, setCurrentRoom] = useState('');
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  useEffect(() => {
    const savedRoom = sessionStorage.getItem('selectedRoom') || '';
    setCurrentRoom(savedRoom);
  }, []);

  useEffect(() => {
    if (!token) return;
    try {
      const decoded = jwtDecode(token);
      setDoctorId(decoded.id);
    } catch (e) {
      console.error('Invalid token', e);
    }
  }, [token]);

  useEffect(() => {
    if (!doctorId) {
    return;
  }

    setLoading(true);
    setError('');
    fetch(`${API_URL}/appointments/today/${doctorId}`, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      }
    })
      .then((res) => {
        if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡πÑ‡∏î‡πâ');
        return res.json();
      })
      .then((data) => {
        setAppointments(data);
        setLoading(false);
      })
      .catch((err) => {
        setError(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
        setLoading(false);
      });
  }, [doctorId]);

  const handleConfirmRoom = (room) => {
    setCurrentRoom(room);
    sessionStorage.setItem('selectedRoom', room);
    setIsModalOpen(false);
    navigate('/dashboard/doctor/room');
  };

  return (
    <div style={{ padding: '2rem' }}>
      {/* Header */}
      <h1>‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á Doctor</h1>
      <p>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ToothCraft ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏≠</p>

      <div style={{ margin: '1.5rem 0', display: 'flex', flexWrap: 'wrap', gap: '1rem', alignItems: 'center' }}>
        {/* <span>
          ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏≠‡∏≠‡∏¢‡∏π‡πà: <strong>{currentRoom || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á'}</strong>
        </span> */}
        <button onClick={() => setIsModalOpen(true)}>üè• ‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à</button>
        <Link to="/search">
          <button>üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</button>
        </Link>
        <Link to="/doctor-today-summary">
          <button>üìù ‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</button>
        </Link>
        <Link to="/continue-tx-patient-list">
          <button>üîÅ ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á</button>
        </Link>
        <Link to="/my-df-summary-report">
          <button>üìÑ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô DF ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</button>
        </Link>
        <Link to="/logout">
          <button>üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>
        </Link>
      </div>

      {loading && (
        <>
          <hr style={{ margin: '2rem 0' }} />
          <div style={{ marginTop: '1rem' }}>
            üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢...
          </div>
        </>
      )}

      {!loading && !error && appointments.length > 0 && (
        <table
          style={{
            width: '100%',
            borderCollapse: 'collapse',
            marginTop: '1rem',
          }}
        >
          <thead>
            <tr style={{ backgroundColor: '#f0f0f0' }}>
              <th style={{ border: '1px solid #ccc', padding: '8px' }}>‡πÄ‡∏ß‡∏•‡∏≤</th>
              <th style={{ border: '1px solid #ccc', padding: '8px' }}>
                ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
              </th>
              <th style={{ border: '1px solid #ccc', padding: '8px' }}>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
            </tr>
          </thead>
          <tbody>
            {appointments.map((appt) => (
              <tr key={appt.id}>
                <td style={{ border: '1px solid #ccc', padding: '8px' }}>
                  {new Date(appt.appointment_time).toLocaleTimeString('th-TH', {
                    hour: '2-digit',
                    minute: '2-digit',
                  })}
                </td>
                <td style={{ border: '1px solid #ccc', padding: '8px' }}>
                  {appt.patients
                    ? `${appt.patient_id} - ${appt.patients.first_name || ''} ${appt.patients.last_name || ''}`
                    : '-'}
                </td>
                <td style={{ border: '1px solid #ccc', padding: '8px' }}>
                  {appt.note || '-'}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}

      {!loading && !error && appointments.length === 0 && (
        <>
          <hr style={{ margin: '2rem 0' }} />
          <div style={{ marginTop: '1rem', color: '#666' }}>
            üì≠ ‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
          </div>
        </>
      )}

      {error && (
        <>
          <hr style={{ margin: '2rem 0' }} />
          <div style={{ color: 'red', marginTop: '1rem' }}>
            ‚ùó {error}
          </div>
        </>
      )}

      <hr style={{ margin: '2rem 0' }} />

      {/* Info Box */}
      <div style={{
        backgroundColor: '#f0f8ff',
        padding: '1.5rem',
        borderRadius: '10px',
        lineHeight: 1.6
      }}>
        <p>
          üëâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏≠‡∏™‡∏π‡πà‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏° ‡∏ó‡∏π‡πâ‡∏ò‡∏Ñ‡∏£‡∏≤‡∏ü‡∏ü‡∏ü‡∏ü‡∏ü‡∏ü
        </p>
        <p>
          üí° ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ ‡πÅ‡∏ï‡πà‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡πÑ‡∏ß‡πâ ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ ‡πÅ‡∏Æ‡∏£‡πà!!!
        </p>
      </div>

      {/* Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á */}
      <EnterRoomModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onConfirm={handleConfirmRoom}
      />
    </div>
  );
}
