// üìÅ frontend/src/pages/liff_patient_select.jsx
import React, { useState, useEffect } from "react";
import axios from "axios";

const API_URL = process.env.REACT_APP_API_URL;
const LIFF_ID = '2007782065-3M56JnV7';

export default function LiffPatientSelect() {
  const [patients, setPatients] = useState([]);
  const [status, setStatus] = useState("loading"); // loading, need-add-oa, ready, error

  useEffect(() => {
    const initLiff = async () => {
      try {
        const liff = (await import("@line/liff")).default;
        await liff.init({ liffId: LIFF_ID });

        if (!liff.isLoggedIn()) {
          liff.login();
          return;
        }

        const profile = await liff.getProfile();
        const friendship = await liff.getFriendship();

        if (!friendship.friendFlag) {
          setStatus('need-add-oa');
          return;
        }

        // ‡∏õ‡∏Å‡∏ï‡∏¥ liff.getProfile() ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô anonymous ID (‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏•‡∏¢‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô)
        // ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ß‡∏£‡πå ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ profile.userId ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "U" ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô prefix ‡∏Ç‡∏≠‡∏á LINE userId ‡∏à‡∏£‡∏¥‡∏á
        if (!profile.userId || !profile.userId.startsWith("U")) {
          setStatus('need-add-oa');
          return;
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á patient
        const res = await axios.get(`${API_URL}/public/search-patient-by-LIFF`, {
          line_user_id: profile.userId
        });

        setPatients(res.data);
        setStatus("ready");
      } catch (err) {
        console.error("LIFF init error", err);
        setStatus("error");
      }
    };

    initLiff();
  }, []);

  const handleSelectPatient = (patient) => {
    alert(`‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${patient.first_name} ${patient.last_name}`);
    // ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API /auth/login-patient-liff ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
  };

  if (status === "loading") return <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>;
  if (status === "error") return <p>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏õ LINE</p>;
  if (status === 'need-add-oa') {
    return (
      <div className="text-center" style={{ padding: '1rem', maxWidth: '400px', margin: '0 auto' }}>
        <style>{`
          .line-add-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 10px 20px;
            background-color: #06C755;
            color: white;
            font-weight: bold;
            text-decoration: none;
            border-radius: 999px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: background-color 0.3s ease, transform 0.2s ease;
            margin-bottom: 1rem;
          }

          .line-add-button:hover {
            background-color: #05b64a;
            transform: translateY(-1px);
          }

          .line-icon {
            font-size: 18px;
            margin-right: 8px;
          }

          .reload-button {
            display: inline-block;
            margin-top: 0.5rem;
            padding: 8px 16px;
            font-size: 0.9rem;
            font-weight: 500;
            color: #2563eb;
            background-color: #eff6ff;
            border: 1px solid #bfdbfe;
            border-radius: 999px;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.2s ease;
          }

          .reload-button:hover {
            background-color: #dbeafe;
            transform: translateY(-1px);
          }
        `}</style>

        <p style={{ marginBottom: '1rem', color: '#DC2626', fontWeight: '600' }}>
          ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏≠‡∏î LINE Official Account ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
        </p>

        <a
          href="https://lin.ee/U4p9FYN"
          target="_blank"
          rel="noopener noreferrer"
          className="line-add-button"
        >
          <span className="line-icon">‚ûï</span>
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ö LINE OA
        </a>

        <div>
          <button
            onClick={() => window.location.reload()}
            className="reload-button"
          >
            üîÑ ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏≠‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
          </button>
        </div>
      </div>
    );
  }

  if (status === 'ready') {
    return (
      <div style={{ padding: "1rem" }}>
        <h2>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ</h2>
        {patients.length === 0 ? (
          <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö LINE ‡∏ô‡∏µ‡πâ</p>
        ) : (
          <ul>
            {patients.map((p) => (
              <>
              <p style={{ marginTop: '1rem' }}>
                ‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ<br />
                <strong>
                  ‡∏ä‡∏∑‡πà‡∏≠: {p.first_name} {p.last_name}<br />
                  ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: {p.id_number}
                </strong>
              </p>
              <li
                key={p.id}
                style={{
                  padding: "0.5rem",
                  border: "1px solid #ccc",
                  marginBottom: "0.5rem",
                  borderRadius: "8px",
                  cursor: "pointer"
                }}
                onClick={() => handleSelectPatient(p)}
              >
                {p.first_name} {p.last_name} ({p.telephone || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå"})
              </li>
              </>
            ))}
          </ul>
        )}
      </div>
    );
  }
}
