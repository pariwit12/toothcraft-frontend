import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';

const API_URL = process.env.REACT_APP_API_URL;

export default function ReminderList() {
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [quota, setQuota] = useState(null); // üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤
  const [quotaLoading, setQuotaLoading] = useState(false); // üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤
  const token = localStorage.getItem('token');
  const navigate = useNavigate();

  const fetchAppointments = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/appointments/reminders`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      const data = await response.json();
      setAppointments(data);
    } catch (error) {
      console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchLineQuota = async () => {
    setQuotaLoading(true);
    try {
      const response = await fetch(`${API_URL}/line/quota`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      const data = await response.json();
      setQuota(data);
    } catch (error) {
      console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Line quota:', error);
    } finally {
      setQuotaLoading(false);
    }
  };

  useEffect(() => {
    fetchAppointments();
    fetchLineQuota();
  }, []);

  const formatDateThai = (dateStr) =>
    new Date(dateStr).toLocaleDateString('th-TH', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });

  const formatTime = (dateStr) =>
    new Date(dateStr).toLocaleTimeString('th-TH', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false,
    });

  const generateMessage = (a) => {
    const name = `${a.patients?.first_name || ''} ${a.patients?.last_name || ''}`;
    const date = formatDateThai(a.appointment_time);
    const time = formatTime(a.appointment_time);
    const doctor = a.doctors?.first_name
      ? `‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏≠${a.doctors.first_name} ${a.doctors.last_name || ''}`
      : '';
    const note = a.note ? `\n‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${a.note}` : '';
    return `üìå ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì ${name}\n‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å ToothCraft\n‡πÉ‡∏ô‡∏ß‡∏±‡∏ô ${date} ‡πÄ‡∏ß‡∏•‡∏≤ ${time} ${doctor}${note}\n\n‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≤‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ üòä`;
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text)
      .then(() => alert('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'))
      .catch(() => alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ'));
  };

  const markAsReminded = async (id, patientName) => {
    const confirmed = window.confirm(
      `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á "${patientName}" ‡πÅ‡∏•‡πâ‡∏ß?`
    );
    if (!confirmed) return;

    try {
      const response = await fetch(`${API_URL}/appointments/${id}/mark-reminded`, {
        method: 'PATCH',
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) throw new Error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï');

      await fetchAppointments();
    } catch (error) {
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï reminder_sent ‡πÑ‡∏î‡πâ');
      console.error(error);
    }
  };

  const pendingReminders = appointments.filter(a => !a.reminder_sent);
  const sentReminders = appointments.filter(a => a.reminder_sent);

  return (
    <div style={{ padding: '2rem' }}>
      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '1rem' }}>
        <h2 style={{ margin: 0 }}>üîî ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ</h2>
        <button
          onClick={() => navigate('/dashboard/staff')}
          style={{
            marginLeft: '1rem',
            border: 'none',
            padding: '0.5rem 1rem',
            borderRadius: '6px',
            cursor: 'pointer',
          }}
        >
          ‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        </button>
      </div>

      {/* üü¢ ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ Line ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà */}
      <div style={{
        padding: '0.5rem 1rem',
        backgroundColor: '#e6f7ff',
        border: '1px solid #91d5ff',
        borderRadius: '8px',
        marginBottom: '1rem'
      }}>
        <p style={{ margin: 0, fontWeight: 'bold' }}>
          ‚ú® ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Line OA:
        </p>
        {quotaLoading ? (
          <p style={{ margin: 0 }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤...</p>
        ) : quota ? (
          <p style={{ margin: 0 }}>
            ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Push Message: <span style={{ fontWeight: 'bold' }}>{quota.value}</span> ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {quota.type === 'limited' ? '‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏Å‡∏±‡∏î' : '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'})
          </p>
        ) : (
          <p style={{ margin: 0, color: 'red' }}>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÑ‡∏î‡πâ</p>
        )}
      </div>

      {loading ? (
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
      ) : (
        <>
          {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
          <h3 style={{ marginTop: '2rem' }}>üü° ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h3>
          {pendingReminders.length === 0 ? (
            <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</p>
          ) : (
            <ul style={{ listStyle: 'none', padding: 0 }}>
              {pendingReminders.map((a) => {
                const message = generateMessage(a);
                const hn = a.patients?.id || '‡πÑ‡∏°‡πà‡∏û‡∏ö HN';
                const name = `${a.patients?.first_name || ''} ${a.patients?.last_name || ''}`;

                return (
                  <li
                    key={a.id}
                    style={{
                      border: '1px solid #ddd',
                      borderRadius: '10px',
                      padding: '1rem',
                      marginBottom: '1rem',
                      backgroundColor: '#fefefe',
                    }}
                  >
                    <div style={{ marginBottom: '0.5rem', fontWeight: 'bold' }}>
                      üÜî HN: {hn}
                    </div>
                    <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>{message}</pre>
                    <div style={{ marginTop: '0.5rem' }}>
                      <button
                        onClick={() => copyToClipboard(message)}
                        style={{
                          backgroundColor: '#4caf50',
                          color: 'white',
                          border: 'none',
                          padding: '0.5rem 1rem',
                          borderRadius: '6px',
                          marginRight: '1rem',
                          cursor: 'pointer',
                        }}
                      >
                        üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                      </button>
                      <button
                        onClick={() => markAsReminded(a.id, name)}
                        style={{
                          backgroundColor: '#1976d2',
                          color: 'white',
                          border: 'none',
                          padding: '0.5rem 1rem',
                          borderRadius: '6px',
                          cursor: 'pointer',
                        }}
                      >
                        ‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
                      </button>
                    </div>
                  </li>
                );
              })}
            </ul>
          )}

          {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß */}
          <h3 style={{ marginTop: '2rem' }}>‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß</h3>
          {sentReminders.length === 0 ? (
            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß</p>
          ) : (
            <ul style={{ listStyle: 'none', padding: 0 }}>
              {sentReminders.map((a) => {
                const message = generateMessage(a);
                const hn = a.patients?.id || '‡πÑ‡∏°‡πà‡∏û‡∏ö HN';

                return (
                  <li
                    key={a.id}
                    style={{
                      border: '1px solid #ddd',
                      borderRadius: '10px',
                      padding: '1rem',
                      marginBottom: '1rem',
                      backgroundColor: '#f4f4f4',
                      opacity: 0.8,
                    }}
                  >
                    <div style={{ marginBottom: '0.5rem', fontWeight: 'bold' }}>
                      üÜî HN: {hn}
                    </div>
                    <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>{message}</pre>
                    <div style={{ marginTop: '0.5rem' }}>
                      <button
                        onClick={() => copyToClipboard(message)}
                        style={{
                          backgroundColor: '#4caf50',
                          color: 'white',
                          border: 'none',
                          padding: '0.5rem 1rem',
                          borderRadius: '6px',
                          cursor: 'pointer',
                        }}
                      >
                        üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                      </button>
                    </div>
                  </li>
                );
              })}
            </ul>
          )}
        </>
      )}
    </div>
  );
}
